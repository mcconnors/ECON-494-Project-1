## OUTPUT
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### PROJECT 1 - INTRO TO BUSINESS ANALYTICS ###
> # IMPORTING DATASET - UNEMPLOYMENT AND RELATED FACTORS BY STATE
> df<-read.csv('/Users/madonnaconnors/Desktop/IBA\ PROJECT\ 1/IBA\ Project\ I\ Dataset.csv')
> # First will perform preliminary exploratory analysis before determining cleaning tactics and generating visualizations
> # After importing the data, will use the view function to see the full data sheet/ data frame that was imported
> View(df)
> #Using the summary function to get the "six number summary" statistics
> summary(df)
        STATE         YEAR       POSTAL.ABBR.      CODE       AVG..UNEMPLOYMENT.RATE
           : 1   Min.   :2008          : 1    Min.   : 1.00   Min.   :0.03200       
 Alabama   : 1   1st Qu.:2008   AK     : 1    1st Qu.:16.25   1st Qu.:0.04625       
 Alaska    : 1   Median :2008   AL     : 1    Median :28.50   Median :0.05550       
 Arizona   : 1   Mean   :2008   AR     : 1    Mean   :28.42   Mean   :0.05510       
 Arkansas  : 1   3rd Qu.:2008   AZ     : 1    3rd Qu.:40.75   3rd Qu.:0.06500       
 California: 1   Max.   :2008   CA     : 1    Max.   :55.00   Max.   :0.08300       
 (Other)   :45   NA's   :1      (Other):45    NA's   :1       NA's   :1             
 AVG..PER.CAPITA.PERSONAL.INCOME REAL.TOTAL.GDP    POPULATION.SIZE..Thousands.of.Persons.
 Min.   :30167                   Min.   :  27213   Min.   :  553                         
 1st Qu.:34688                   1st Qu.:  88642   1st Qu.: 1814                         
 Median :37960                   Median : 209641   Median : 4384                         
 Mean   :39273                   Mean   : 318146   Mean   : 6097                         
 3rd Qu.:41974                   3rd Qu.: 407183   3rd Qu.: 6584                         
 Max.   :60569                   Max.   :2068115   Max.   :36783                         
 NA's   :1                       NA's   :1         NA's   :1                             
 BACHELOR.S.DEGREE.OR.HIGHER
 Min.   :0.1720             
 1st Qu.:0.2402             
 Median :0.2635             
 Mean   :0.2709             
 3rd Qu.:0.3018             
 Max.   :0.3820             
 NA's   :1                  
> # Checking the object class of the relevant parts of the dataset
> class(df)
[1] "data.frame"
> class(df$AVG..UNEMPLOYMENT.RATE)
[1] "numeric"
> class(df$STATE)
[1] "factor"
> class(df$AVG..PER.CAPITA.PERSONAL.INCOME)
[1] "integer"
> class(df$REAL.TOTAL.GDP)
[1] "numeric"
> class(df$POPULATION.SIZE..Thousands.of.Persons.)
[1] "numeric"
> class(df$BACHELOR.S.DEGREE.OR.HIGHER)
[1] "numeric"
> # Finding levels of the categorical variables in the dataset
> levels(df$STATE)
 [1] ""               "Alabama"        "Alaska"         "Arizona"        "Arkansas"       "California"    
 [7] "Colorado"       "Connecticut"    "Delaware"       "Florida"        "Georgia"        "Hawaii"        
[13] "Idaho"          "Illinois"       "Indiana"        "Iowa"           "Kansas"         "Kentucky"      
[19] "Louisiana"      "Maine"          "Maryland"       "Massachusetts"  "Michigan"       "Minnesota"     
[25] "Mississippi"    "Missouri"       "Montana"        "Nebraska"       "Nevada"         "New Hampshire" 
[31] "New Jersey"     "New Mexico"     "New York"       "North Carolina" "North Dakota"   "Ohio"          
[37] "Oklahoma"       "Oregon"         "Pennsylvania"   "Rhode Island"   "South Carolina" "South Dakota"  
[43] "Tennessee"      "Texas"          "Utah"           "Vermont"        "Virginia"       "Washington"    
[49] "West Virginia"  "Wisconsin"      "Wyoming"       
> levels(df$YEAR)
NULL
> # Number of levels
> length(levels(df$state))
[1] 0
> length(levels(df$YEAR))
[1] 0
> # Computing summary statistics
> mean(df$AVG..UNEMPLOYMENT.RATE)
[1] NA
> mean(df$AVG..PER.CAPITA.PERSONAL.INCOME)
[1] NA
> mean(df$REAL.TOTAL.GDP)
[1] NA
> sd(df$AVG..UNEMPLOYMENT.RATE)
[1] NA
> var(df$POPULATION.SIZE..Thousands.of.Persons.)
[1] NA
> hist(df$AVG..UNEMPLOYMENT.RATE)
> hist(df$BACHELOR.S.DEGREE.OR.HIGHER)
> hist(df$REAL.TOTAL.GDP)
> hist(df$POPULATION.SIZE..Thousands.of.Persons.)
> ### CLEANING ###
> # Deleting the 'Postal Abbr.' and 'Code' variables/columns because they are not relevant to our analysis
> View(df)
> df1 <- data.frame(df)
> View(df1)
> df1$POSTAL.ABBR. <- NULL 
> df1$CODE <- NULL
> dim(df)
[1] 51  9
> # Editing column name 
> colnames(df1) # Viewing column names
[1] "STATE"                                  "YEAR"                                  
[3] "AVG..UNEMPLOYMENT.RATE"                 "AVG..PER.CAPITA.PERSONAL.INCOME"       
[5] "REAL.TOTAL.GDP"                         "POPULATION.SIZE..Thousands.of.Persons."
[7] "BACHELOR.S.DEGREE.OR.HIGHER"           
> ## renaming these columns so it is easier/clearer when we input in the code for later, especially for visualizations
> colnames(df1)[3] <- "AVG.UNEMPLOYMENT.RATE"
> colnames(df1)[4] <- "AVG.PER.CAPITA.PERSONAL.INCOME"
> colnames(df1)[5] <- "REAL.TOTAL.GDP"
> colnames(df1)[6] <- "AVG.RESIDENT.POPULATION" 
> colnames(df1)[7] <- "BACHELOR.S.DEGREE.OR.HIGHER"
> colnames(df1) # View new names
[1] "STATE"                          "YEAR"                           "AVG.UNEMPLOYMENT.RATE"         
[4] "AVG.PER.CAPITA.PERSONAL.INCOME" "REAL.TOTAL.GDP"                 "AVG.RESIDENT.POPULATION"       
[7] "BACHELOR.S.DEGREE.OR.HIGHER"   
> library(ggplot2)
> # Creating scatter plots using the point geometry
> ggplot(df1, aes(x = BACHELOR.S.DEGREE.OR.HIGHER, y = AVG.UNEMPLOYMENT.RATE)) # without data rendered
> ggplot(df1, aes(x = BACHELOR.S.DEGREE.OR.HIGHER, y = AVG.UNEMPLOYMENT.RATE)) + 
+   geom_point() #with data rendered
Warning message:
Removed 1 rows containing missing values (geom_point). 
> ggplot(df1, aes(AVG.RESIDENT.POPULATION, AVG.UNEMPLOYMENT.RATE)) + geom_point()
Warning message:
Removed 1 rows containing missing values (geom_point). 
> ggplot(df1, aes(REAL.TOTAL.GDP, AVG.UNEMPLOYMENT.RATE)) + geom_point()
Warning message:
Removed 1 rows containing missing values (geom_point). 
> ggplot(df1, aes(AVG.PER.CAPITA.PERSONAL.INCOME, AVG.UNEMPLOYMENT.RATE)) + geom_point()
Warning message:
Removed 1 rows containing missing values (geom_point). 
> #smoothing the plots
> ggplot(df1, aes(BACHELOR.S.DEGREE.OR.HIGHER, AVG.UNEMPLOYMENT.RATE)) +
+   geom_point() +
+   geom_smooth()
`geom_smooth()` using method = 'loess' and formula 'y ~ x'
Warning messages:
1: Removed 1 rows containing non-finite values (stat_smooth). 
2: Removed 1 rows containing missing values (geom_point). 
> ggplot(df1, aes(AVG.RESIDENT.POPULATION, AVG.UNEMPLOYMENT.RATE)) +
+   geom_point() +
+   geom_smooth()
`geom_smooth()` using method = 'loess' and formula 'y ~ x'
Warning messages:
1: Removed 1 rows containing non-finite values (stat_smooth). 
2: Removed 1 rows containing missing values (geom_point). 
> ggplot(df1, aes(REAL.TOTAL.GDP, AVG.UNEMPLOYMENT.RATE)) +
+   geom_point() +
+   geom_smooth()
`geom_smooth()` using method = 'loess' and formula 'y ~ x'
Warning messages:
1: Removed 1 rows containing non-finite values (stat_smooth). 
2: Removed 1 rows containing missing values (geom_point). 
> ggplot(df1, aes(AVG.UNEMPLOYMENT.RATE, AVG.PER.CAPITA.PERSONAL.INCOME)) +
+   geom_point() +
+   geom_smooth()
`geom_smooth()` using method = 'loess' and formula 'y ~ x'
Warning messages:
1: Removed 1 rows containing non-finite values (stat_smooth). 
2: Removed 1 rows containing missing values (geom_point). 
> # linear regression
> ggplot(df1, aes(BACHELOR.S.DEGREE.OR.HIGHER, AVG.UNEMPLOYMENT.RATE)) +
+   geom_point() +
+   geom_smooth(method = "lm")
`geom_smooth()` using formula 'y ~ x'
Warning messages:
1: Removed 1 rows containing non-finite values (stat_smooth). 
2: Removed 1 rows containing missing values (geom_point). 
> ggplot(df1, aes(BACHELOR.S.DEGREE.OR.HIGHER, AVG.UNEMPLOYMENT.RATE)) + geom_jitter()
Warning message:
Removed 1 rows containing missing values (geom_point). 
> ggplot(df1, aes(BACHELOR.S.DEGREE.OR.HIGHER, AVG.UNEMPLOYMENT.RATE)) + geom_boxplot()
Warning messages:
1: Continuous x aesthetic -- did you forget aes(group=...)? 
2: Removed 1 rows containing missing values (stat_boxplot). 
> ggplot(df1, aes(BACHELOR.S.DEGREE.OR.HIGHER, AVG.UNEMPLOYMENT.RATE)) + geom_violin()
Warning message:
Removed 1 rows containing non-finite values (stat_ydensity). 
> ggplot(df1, aes(BACHELOR.S.DEGREE.OR.HIGHER, AVG.PER.CAPITA.PERSONAL.INCOME )) + geom_violin()
Warning message:
Removed 1 rows containing non-finite values (stat_ydensity). 
> ggplot(df1, aes(AVG.UNEMPLOYMENT.RATE)) + geom_histogram()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning message:
Removed 1 rows containing non-finite values (stat_bin). 
> ggplot(df1, aes(BACHELOR.S.DEGREE.OR.HIGHER)) + geom_histogram()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning message:
Removed 1 rows containing non-finite values (stat_bin). 
> ggplot(df1, aes(AVG.RESIDENT.POPULATION)) + geom_histogram()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning message:
Removed 1 rows containing non-finite values (stat_bin). 
> ggplot(df1, aes(REAL.TOTAL.GDP)) + geom_histogram()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning message:
Removed 1 rows containing non-finite values (stat_bin). 
> ggplot(df1, aes(AVG.PER.CAPITA.PERSONAL.INCOME)) + geom_histogram()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning message:
Removed 1 rows containing non-finite values (stat_bin). 
> x <- "BACHELOR.S.DEGREE.OR.HIGHER"
> y <- "AVG.UNEMPLOYMENT.RATE"
> cor(df1$BACHELOR.S.DEGREE.OR.HIGHER, df1$AVG.UNEMPLOYMENT.RATE)
[1] NA
> cor.test(x,y)
Error in cor.test.default(x, y) : 'x' must be a numeric vector
> ## normality test
> shapiro.test(df1$BACHELOR.S.DEGREE.OR.HIGHER) #p-value = 0.6957

	Shapiro-Wilk normality test

data:  df1$BACHELOR.S.DEGREE.OR.HIGHER
W = 0.98328, p-value = 0.6957

> shapiro.test(df1$AVG.UNEMPLOYMENT.RATE) #p-value = 0.6383

	Shapiro-Wilk normality test

data:  df1$AVG.UNEMPLOYMENT.RATE
W = 0.98199, p-value = 0.6383

> res <- cor.test(df1$BACHELOR.S.DEGREE.OR.HIGHER, df1$AVG.UNEMPLOYMENT.RATE, 
+                 method = "pearson")
> res ## The p-value is 0.4614, which is greater than the alpha level if 0.05 - fail to reject - corr. coeff. is -0.87 - thus, no correlation/ negative correlation

	Pearson's product-moment correlation

data:  df1$BACHELOR.S.DEGREE.OR.HIGHER and df1$AVG.UNEMPLOYMENT.RATE
t = -0.74246, df = 48, p-value = 0.4614
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 -0.3738159  0.1770433
sample estimates:
       cor 
-0.1065554 

> res <- cor.test(df1$AVG.UNEMPLOYMENT.RATE, df1$AVG.PER.CAPITA.PERSONAL.INCOME, 
+                 method = "pearson")
> res ## The p-value is 0.2549 > 0.05 - fail to reject - corr. coeff. is -0.16 - thus, no correlation (closer to 0)

	Pearson's product-moment correlation

data:  df1$AVG.UNEMPLOYMENT.RATE and df1$AVG.PER.CAPITA.PERSONAL.INCOME
t = -1.1524, df = 48, p-value = 0.2549
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 -0.4231030  0.1197374
sample estimates:
       cor 
-0.1640788 

> res <- cor.test(df1$REAL.TOTAL.GDP, df1$AVG.UNEMPLOYMENT.RATE, 
+                 method = "pearson")
> res ## The p-value is 0.04578 < 0.05 - reject - corr. coeff. is 0.2838237 - thus, slightly positive correlation

	Pearson's product-moment correlation

data:  df1$REAL.TOTAL.GDP and df1$AVG.UNEMPLOYMENT.RATE
t = 2.0507, df = 48, p-value = 0.04578
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.005945738 0.521010725
sample estimates:
      cor 
0.2838237 

> res <- cor.test(df1$AVG.RESIDENT.POPULATION, df1$AVG.UNEMPLOYMENT.RATE, 
+                 method = "pearson")
> res ## The p-value is 0.01007 < 0.05 - reject - corr. coeff. is 0.360721 - thus, strong positive correlation

	Pearson's product-moment correlation

data:  df1$AVG.RESIDENT.POPULATION and df1$AVG.UNEMPLOYMENT.RATE
t = 2.6795, df = 48, p-value = 0.01007
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.09156618 0.58075662
sample estimates:
      cor 
0.3607201 

> 
> ## LINEAR REGRESSION MODEL ##
> ## LINEAR REGRESSION MODEL ##
> ## Model: AVG.UNEMPLOYMENT.RATE = B0 + B1*BACHELOR.S.DEGREE.OR.HIGHER+u
> ## LINEAR REGRESSION MODEL ##
> ## Model: AVG.UNEMPLOYMENT.RATE = B0 + B1*BACHELOR.S.DEGREE.OR.HIGHER+u
> ## AVG.PER.CAPITA.PERSONAL.INCOME = B0 + B1*AVG.UNEMPLOYMENT.RATE+u
> ## LINEAR REGRESSION MODEL ##
> ## Model: AVG.UNEMPLOYMENT.RATE = B0 + B1*BACHELOR.S.DEGREE.OR.HIGHER+u
> ## AVG.PER.CAPITA.PERSONAL.INCOME = B0 + B1*AVG.UNEMPLOYMENT.RATE+u
> ## AVG.UNEMPLOYMENT.RATE = B0 + B1*REAL.TOTAL.GDP+u
> ## LINEAR REGRESSION MODEL ##
> ## Model: AVG.UNEMPLOYMENT.RATE = B0 + B1*BACHELOR.S.DEGREE.OR.HIGHER+u
> ## AVG.PER.CAPITA.PERSONAL.INCOME = B0 + B1*AVG.UNEMPLOYMENT.RATE+u
> ## AVG.UNEMPLOYMENT.RATE = B0 + B1*REAL.TOTAL.GDP+u
> ## AVG.RESIDENT.POPULATION = B0 + B1*AVG.UNEMPLOYMENT.RATE+u